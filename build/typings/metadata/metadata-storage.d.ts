import { type SchemaGeneratorOptions } from "../schema/schema-generator.js";
import { type AuthorizedClassMetadata, type AuthorizedMetadata, type ClassMetadata, type EnumMetadata, type ExtensionsClassMetadata, type ExtensionsFieldMetadata, type FieldMetadata, type FieldResolverMetadata, type MiddlewareMetadata, type ParamMetadata, type ResolverClassMetadata, type ResolverMetadata, type ResolverMiddlewareMetadata, type SubscriptionResolverMetadata, type UnionMetadata, type UnionMetadataWithSymbol } from "./definitions/index.js";
import { type DirectiveArgumentMetadata, type DirectiveClassMetadata, type DirectiveFieldMetadata } from "./definitions/directive-metadata.js";
import { type InterfaceClassMetadata } from "./definitions/interface-class-metadata.js";
import { type ObjectClassMetadata } from "./definitions/object-class-metadata.js";
export declare class MetadataStorage {
    queries: ResolverMetadata[];
    mutations: ResolverMetadata[];
    subscriptions: SubscriptionResolverMetadata[];
    fieldResolvers: FieldResolverMetadata[];
    objectTypes: ObjectClassMetadata[];
    objectTypesCache?: Map<Function, ObjectClassMetadata>;
    inputTypes: ClassMetadata[];
    argumentTypes: ClassMetadata[];
    interfaceTypes: InterfaceClassMetadata[];
    interfaceTypesCache?: Map<Function, InterfaceClassMetadata>;
    authorizedFields: AuthorizedMetadata[];
    authorizedFieldsByTargetAndFieldCache?: Map<any, AuthorizedMetadata>;
    authorizedResolver: AuthorizedClassMetadata[];
    authorizedResolverByTargetCache?: Map<Function, AuthorizedClassMetadata>;
    enums: EnumMetadata[];
    unions: UnionMetadataWithSymbol[];
    middlewares: MiddlewareMetadata[];
    middlewaresByTargetAndFieldCache?: Map<string, MiddlewareMetadata[]>;
    resolverMiddlewares: ResolverMiddlewareMetadata[];
    resolverMiddlewaresByTargetCache?: Map<Function, ResolverMiddlewareMetadata[]>;
    classDirectives: DirectiveClassMetadata[];
    classDirectivesByTargetCache?: Map<Function, DirectiveClassMetadata[]>;
    fieldDirectives: DirectiveFieldMetadata[];
    fieldDirectivesByTargetAndFieldCache?: Map<any, DirectiveFieldMetadata[]>;
    argumentDirectives: DirectiveArgumentMetadata[];
    classExtensions: ExtensionsClassMetadata[];
    fieldExtensions: ExtensionsFieldMetadata[];
    resolverClasses: ResolverClassMetadata[];
    resolverClassesCache?: Map<Function, ResolverClassMetadata>;
    fields: FieldMetadata[];
    fieldsCache?: Map<any, FieldMetadata[]>;
    params: ParamMetadata[];
    paramsCache?: Map<string, ParamMetadata[]>;
    collectQueryHandlerMetadata(definition: ResolverMetadata): void;
    collectMutationHandlerMetadata(definition: ResolverMetadata): void;
    collectSubscriptionHandlerMetadata(definition: SubscriptionResolverMetadata): void;
    collectFieldResolverMetadata(definition: FieldResolverMetadata): void;
    collectObjectMetadata(definition: ObjectClassMetadata): void;
    collectInputMetadata(definition: ClassMetadata): void;
    collectArgsMetadata(definition: ClassMetadata): void;
    collectInterfaceMetadata(definition: InterfaceClassMetadata): void;
    collectAuthorizedFieldMetadata(definition: AuthorizedMetadata): void;
    collectAuthorizedResolverMetadata(definition: AuthorizedClassMetadata): void;
    collectEnumMetadata(definition: EnumMetadata): void;
    collectUnionMetadata(definition: UnionMetadata): symbol;
    collectMiddlewareMetadata(definition: MiddlewareMetadata): void;
    collectResolverMiddlewareMetadata(definition: ResolverMiddlewareMetadata): void;
    collectResolverClassMetadata(definition: ResolverClassMetadata): void;
    collectClassFieldMetadata(definition: FieldMetadata): void;
    collectHandlerParamMetadata(definition: ParamMetadata): void;
    collectDirectiveClassMetadata(definition: DirectiveClassMetadata): void;
    collectDirectiveFieldMetadata(definition: DirectiveFieldMetadata): void;
    collectDirectiveArgumentMetadata(definition: DirectiveArgumentMetadata): void;
    collectExtensionsClassMetadata(definition: ExtensionsClassMetadata): void;
    collectExtensionsFieldMetadata(definition: ExtensionsFieldMetadata): void;
    initCache(): void;
    build(options: SchemaGeneratorOptions): void;
    clear(): void;
    private buildClassMetadata;
    private buildResolversMetadata;
    private buildFieldResolverMetadata;
    private buildExtendedResolversMetadata;
    private findFieldRoles;
    private findExtensions;
}
