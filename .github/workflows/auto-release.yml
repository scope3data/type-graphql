name: auto-release

on:
  push:
    branches:
      - main
    paths-ignore:
      - "**.md"
      - "website/**"
      - "docs/**"
      - ".github/**"
      - "!.github/workflows/**"

concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: false

jobs:
  auto-release:
    name: Auto Release
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, 'release:')"
    permissions:
      contents: write
      pull-requests: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22.x

      - name: Install dependencies
        run: npm ci

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Get latest release
        id: latest_release
        run: |
          # Get the latest release tag, fallback to package.json version if none exists
          echo "All tags:"
          git tag --sort=-version:refname
          latest_tag=$(git tag --sort=-version:refname | head -n1)
          if [ -z "$latest_tag" ]; then
            pkg_version=$(node -p "require('./package.json').version")
            latest_tag="v$pkg_version"
          fi
          echo "latest_tag=$latest_tag" >> $GITHUB_OUTPUT
          echo "Latest release tag: $latest_tag"

      - name: Get commits since last release
        id: commits
        run: |
          latest_tag="${{ steps.latest_release.outputs.latest_tag }}"
          if git rev-parse "$latest_tag" >/dev/null 2>&1; then
            # Tag exists, get commits since last release
            commits=$(git log ${latest_tag}..HEAD --oneline --pretty=format:"%s")
          else
            # Tag does not exist, get all commits
            commits=$(git log --oneline --pretty=format:"%s" | head -10)
          fi

          echo "Commits since $latest_tag:"
          echo "$commits"

          # Check if there are any commits to release
          if [ -z "$commits" ]; then
            echo "No new commits to release"
            echo "should_release=false" >> $GITHUB_OUTPUT
            exit 0
          fi

          echo "should_release=true" >> $GITHUB_OUTPUT

      - name: Determine version bump type
        id: bump_type
        if: steps.commits.outputs.should_release == 'true'
        run: |
          latest_tag="${{ steps.latest_release.outputs.latest_tag }}"
          commits=$(git log ${latest_tag}..HEAD --oneline --pretty=format:"%s" || git log --oneline --pretty=format:"%s" | head -10)

          # Default to patch
          bump_type="patch"

          # Check for breaking changes (major)
          if echo "$commits" | grep -qE "^[^:]+!:|BREAKING CHANGE"; then
            bump_type="major"
          # Check for features (minor)
          elif echo "$commits" | grep -qE "^feat(\(.+\))?:"; then
            bump_type="minor"
          # Check for fixes and other changes (patch)
          elif echo "$commits" | grep -qE "^(fix|perf|refactor|style|docs|test|build|ci|chore)(\(.+\))?:"; then
            bump_type="patch"
          fi

          echo "Determined bump type: $bump_type"
          echo "bump_type=$bump_type" >> $GITHUB_OUTPUT

      - name: Bump version
        id: version_bump
        if: steps.commits.outputs.should_release == 'true'
        run: |
          bump_type="${{ steps.bump_type.outputs.bump_type }}"

          # Get current version from package.json
          current_version=$(node -p "require('./package.json').version")
          echo "Current version: $current_version"

          # Bump version using npm
          npm version $bump_type --no-git-tag-version

          # Get new version
          new_version=$(node -p "require('./package.json').version")
          echo "New version: $new_version"
          echo "new_version=$new_version" >> $GITHUB_OUTPUT

      - name: Commit version bump and create tag
        if: steps.commits.outputs.should_release == 'true'
        run: |
          new_version="${{ steps.version_bump.outputs.new_version }}"

          # Commit the version bump
          git add package.json
          git commit -m "release: $new_version"

          # Website-related operations (commented out)
          # npm run --prefix ./website new-release --release=$new_version
          # git add -A .

          # Create and push tag
          git tag "v$new_version"
          git push origin main
          git push origin "v$new_version"

          echo "Created and pushed tag v$new_version"

      - name: Summary
        run: |
          if [ "${{ steps.commits.outputs.should_release }}" = "true" ]; then
            echo "✅ Auto-release completed!"
            echo "New version: ${{ steps.version_bump.outputs.new_version }}"
            echo "Tag created: v${{ steps.version_bump.outputs.new_version }}"
            echo ""
            echo "The check and release workflows will now run automatically."
          else
            echo "ℹ️ No new commits to release - skipping auto-release"
          fi
