name: release

on:
  repository_dispatch:
    types: [release]

concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: true

permissions:
  pull-requests: write
  contents: read

jobs:
  release:
    name: Release package to npm
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.client_payload.tag }}

      - name: Verify version validation passed
        env:
          TYPE_GRAPHQL_VERSION: ${{ github.event.client_payload.tag }}
        run: |
          echo "Verifying release for version: $TYPE_GRAPHQL_VERSION"

          # Ensure this is a valid version tag format
          if ! printf "%s\n" "$TYPE_GRAPHQL_VERSION" | grep -q -P '^v(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)(-(alpha|beta|rc)\.(0|[1-9][0-9]*))?$'; then
            printf '[ERROR]: Invalid version tag format (%s)\n' "$TYPE_GRAPHQL_VERSION"
            exit 1
          fi

          echo "âœ… Version tag format is valid"

      - name: Determine if version is prerelease
        id: prerelease
        env:
          TYPE_GRAPHQL_VERSION: ${{ github.event.client_payload.tag }}
        run: |
          _prerelease=
          if printf "%s\n" "$TYPE_GRAPHQL_VERSION" | grep -q -P '^v(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)$'; then
            _prerelease=false
          else
            _prerelease=true
          fi

          printf 'value=%s\n' "$_prerelease" >> "$GITHUB_OUTPUT"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22.x
          registry-url: "https://registry.npmjs.org"

      - name: Install latest npm
        run: |
          npm install -g npm@latest

      - name: Install Dependencies
        run: |
          npm ci

      - name: Configure npm authentication
        run: |
          echo "//registry.npmjs.org/:_authToken=\${NPM_TOKEN}" > .npmrc

      - name: Prepare package
        run: |
          npm run prepublishOnly
        env:
          TYPE_GRAPHQL_REF: ${{ github.event.client_payload.tag }}

      - name: Format commit messages for release
        id: changelog
        run: |
          COMMITS="${{ github.event.client_payload.commits }}"

          if [ -z "$COMMITS" ]; then
            echo "No commits provided in client_payload"
            FORMATTED_COMMITS="No changes listed"
          else
            FORMATTED_COMMITS=$(echo "$COMMITS" | sed 's/\\n/\n/g')
          fi

          RELEASE_BODY=$(printf "## Changes in this release:\n\n%s\n\nReleased as %s" "$FORMATTED_COMMITS" "${{ github.event.client_payload.tag }}")

          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$RELEASE_BODY" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.event.client_payload.tag }}
          body: ${{ steps.changelog.outputs.changelog }}
          prerelease: ${{ steps.prerelease.outputs.value == 'true' }}

      - name: Publish
        env:
          NPM_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }}
          TYPE_GRAPHQL_PRERELEASE: ${{ steps.prerelease.outputs.value }}
        run: |
          _tag=
          if [ "$TYPE_GRAPHQL_PRERELEASE" = "true" ]; then
            _tag="next"
          else
            _tag="latest"
          fi

          npm publish --ignore-scripts --access public --tag "$_tag"
